{"success":true,"parcel":{"id":4650,"height":8,"token":null,"name":"DFC Francisco Carolinum","traffic_visits":89497,"address":"17 Clarion Alley","visible":true,"geometry":{"type":"Polygon","crs":{"type":"name","properties":{"name":"EPSG:3857"}},"coordinates":[[[-7.36,6.46],[-7.36,6.559899998],[-7.24,6.559899998],[-7.24,6.46],[-7.36,6.46]]]},"area":119.87999728616654,"streets":[{"name":"Clarion Alley","geometry":{"type":"LineString","crs":{"type":"name","properties":{"name":"EPSG:3857"}},"coordinates":[[-7.380000000000001,6.180000000000001],[-7.380000000000001,6.98]]},"visible":true,"kind":null,"island":"San Francisco","id":1965},{"name":"Van Ness Avenue","geometry":{"type":"LineString","crs":{"type":"name","properties":{"name":"EPSG:3857"}},"coordinates":[[-7.78,6.58],[-7.380000000000001,6.58]]},"visible":true,"kind":null,"island":"San Francisco","id":1981},{"name":"Polk Street","geometry":{"type":"LineString","crs":{"type":"name","properties":{"name":"EPSG:3857"}},"coordinates":[[-7.380000000000001,6.44],[-6.98,6.44]]},"visible":true,"kind":null,"island":"San Francisco","id":1987},{"name":"Vermont Street","geometry":{"type":"LineString","crs":{"type":"name","properties":{"name":"EPSG:3857"}},"coordinates":[[-7.25,6.180000000000001],[-7.25,6.44]]},"visible":true,"kind":null,"island":"San Francisco","id":1998},{"name":"Union Street","geometry":{"type":"LineString","crs":{"type":"name","properties":{"name":"EPSG:3857"}},"coordinates":[[-7.220000000000001,6.44],[-7.220000000000001,6.65]]},"visible":true,"kind":null,"island":"San Francisco","id":2008}],"distance_to_center":970.31,"distance_to_closest_common":460.61,"distance_to_ocean":30,"x1":-736,"x2":-724,"y1":0,"y2":8,"z1":646,"z2":656,"suburb":"San Francisco","is_common":false,"owner":"0xd022f7e6331969a3185973259ce8a880f1e492fa","owner_name":null,"updated_at":"2024-03-24T07:47:17.392Z","parcel_users":[{"wallet":"0x92fab452e2f14c7730f79031906e06326c916946","role":"owner"},{"wallet":"0xb89c2f6bb674bd6aace2a1e274d40e6dc4775b15","role":"owner"},{"wallet":"0x3fbf3747128c03d0715438e6e1fcd9df8aa27b0a","role":"owner"},{"wallet":"0xeb50529dc368b079980316e5add1972f13351a23","role":"owner"},{"wallet":"0x0bee39de2c56f10e3fdad62d123f60e07e001d5a","role":"contributor"}],"label":"gallery","description":"Metaverse location of the Oberösterreichische Landes Kultur GmbH, Austria, Museum Francisco Carolinum, OÖ","lightmap_status":"None","content":{"voxels":"eJzt1lsKgzAQhWHbp+7DpbixLL0UKcbcxcTMDL/npSWHKOOn+HJt2QgZkFZ/ayKb+wTZ3JI4LPfak9oxPoOdnix//n/NPfzhD38aevjDH/5me8Ef/jS4wh/+NPTwhz/8aejhD3/y/b2X8f7CQ1oPf7bff+EhrYc//OFvthe7/jR81+EPfxp6+MMf/jT08Ic//M32gj/8We7hb6a/tilb7t3xF69a6rXlGX/hr9xTFK7nn7Z9pd7b11p6/nRrT3l5zul7U5pLfAXlZq4XNvO9c7PUO9+/2gSvzkWWv3WAv9+evf0d1/mMv//5evrz9+zl7/pcZPnj/cf7L530joTcyxdh/PdJ","palette":["#ffffff","#888888","#5e5e5e","#ff71ce","#01cdfe","#05ffa1","#b967ff","#fffb96"],"tileset":"/uploads/atlas/6b36d46e1aba21218fc262c8a5a16d53f47828fe.png","features":[{"type":"vox-model","scale":[25,25,25],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207142952728657970/Aufbau-v9.vox?ex=65de927b&is=65cc1d7b&hm=a5b3b582e9771fb5cefffb0b256323b5a983df90602d452f6e80e2f401dead55&","flipX":true,"position":[2.25,7.7,0],"rotation":[0,-3.14159,0],"version":"40754","uuid":"f3a0b6cd-ddf5-4116-810c-3316181c8773","collidable":true},{"type":"image","scale":[10,13,0.01],"url":"https://cdn.discordapp.com/attachments/655564024452218880/1201468744673808384/Blue-Tile.png?ex=65dc62f6&is=65c9edf6&hm=0352cd45d45fe50925f24cca1f07677f2338dc821d1ad4b2e38bd9a97f9b12a6&","rotation":[0,-1.5707963267948966,0],"position":[-5.75,6.7,0.25],"version":"40439","uuid":"cdb1dc97-a079-4581-bad2-eb5266fdc343"},{"type":"image","scale":[12,13,0.01],"url":"https://cdn.discordapp.com/attachments/655564024452218880/1201468744673808384/Blue-Tile.png?ex=65dc62f6&is=65c9edf6&hm=0352cd45d45fe50925f24cca1f07677f2338dc821d1ad4b2e38bd9a97f9b12a6&","rotation":[0,0,0],"position":[0.25,6.7,-4.75],"version":"40744","uuid":"461fe938-530f-4367-9e2f-6fdb0b3e9023","stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1},{"type":"lantern","scale":[0.5,0.5,0.5],"rotation":[0,0,0],"color":"#00e1ff","strength":100,"position":[4.75,2,2.65],"version":"40439","uuid":"e793dfbd-fa50-4677-9e9a-d7ee32f77dd7"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x30b541f1182ef19c56a39634b2fdaca5a0f2a741/4715","position":[-5.25,4.75,-0.5],"rotation":[0,4.71238898038469,0],"version":"40439","uuid":"8b173adc-af66-4b4d-905c-027f65b80bed","hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","groupId":"8d3b3467-b9ad-445c-9455-ee3760966172"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xdddef0191f778df99db93652c77c1e7630b851bd/0","rotation":[0,3.14159,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[4.25,4.75,-4.25],"version":"40744","uuid":"c6d5b5e0-007c-49e4-8cca-a8108452980a","groupId":"8d3b3467-b9ad-445c-9455-ee3760966172"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x495f947276749ce646f68ac8c248420045cb7b5e/32150014705918146096138927293761864425970273519802704166038767670271735234561","position":[-4,0.775,-4.5],"rotation":[1.5708,3.14159,0],"version":"40439","uuid":"4f79592c-485d-4e52-b3fd-f498f9229fc0","hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":false,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","groupId":"4b244b17-062f-44b1-af45-317cb38adeaa"},{"type":"image","scale":[5.2,1.7,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217406312934146128/GFvcpYVW0AAKnXW-3.png?ex=6603e8fb&is=65f173fb&hm=e7f6f5093a9cce1b5290b89d7931d8ff69f28f7d1cb3edbb281d7fdfda3e0e31&","position":[0.13,0.75,-3.45],"rotation":[1.5708,0,0],"version":"40754","uuid":"ee01ecea-acad-4609-a300-fcabcd1299b7","stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine"},{"type":"image","scale":[8.4,3.22,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217406312934146128/GFvcpYVW0AAKnXW-3.png?ex=6603e8fb&is=65f173fb&hm=e7f6f5093a9cce1b5290b89d7931d8ff69f28f7d1cb3edbb281d7fdfda3e0e31&","rotation":[0,1.5708,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[-5.775,8.1,0.3],"version":"40754","uuid":"81142ee4-ad3a-4357-960e-ea1d1c7763f4","blendMode":"Combine"},{"type":"nft-image","scale":[1,0.4,0.01],"url":"https://opensea.io/assets/ethereum/0x18de6097ce5b5b2724c9cae6ac519917f3f178c0/565","rotation":[0,4.71238898038469,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,5.500000100582838,0.5],"version":"40439","uuid":"3113bbc8-dd42-44a1-8876-d466ae18d61b","groupId":null},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x13178ab07a88f065efe6d06089a6e6ab55ae8a15/189","rotation":[0,3.14159,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-1.75,4.75,-4.25],"version":"40744","uuid":"c7668a47-bd25-49e1-a930-868d12fd5c4a","groupId":null},{"type":"nft-image","scale":[1,0.6,0.01],"url":"https://opensea.io/assets/ethereum/0xf49b26cf118db11a7dd1d9b88c7e1bc153851757/12","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[1.25,5.250000083446498,4.75],"version":"40439","uuid":"1749f421-14a6-44a8-92a9-ea18817bf69a","groupId":null},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/44000091","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[2.25,5.5,4.75],"version":"40439","uuid":"24dacbf6-01f5-4540-ae4c-208fb513cd99","groupId":null},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xf49b26cf118db11a7dd1d9b88c7e1bc153851757/2","position":[-3.5,4.75,-4.25],"rotation":[0,3.14159,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","groupId":null,"version":"40744","uuid":"14e5580f-39e3-47f8-a48c-550b70b88006"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/44000083","rotation":[0,-1.5708,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,6.25,1.75],"groupId":null,"version":"40439","uuid":"f1cc5054-e41e-4add-8162-0fb7de06cfaa"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/102000472","rotation":[0,3.141592653589793,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-4.5,5.5,-4.25],"groupId":null,"version":"40439","uuid":"a966185a-abad-4987-b4b2-a5892ba8ff93"},{"type":"nft-image","scale":[1,0.8,0.01],"url":"https://opensea.io/assets/ethereum/0xe6da43bcfa2ae0ed8c6ac4b3beea1ec9ae65daba/65","rotation":[0,3.14159,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[4.25,6.25,-4.25],"groupId":null,"version":"40744","uuid":"16210f1d-58f0-4c73-b4bb-109681620e5e"},{"type":"nft-image","scale":[1,0.8,0.01],"url":"https://opensea.io/assets/ethereum/0xe6da43bcfa2ae0ed8c6ac4b3beea1ec9ae65daba/195","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-0.75,6.250000078231096,4.75],"groupId":null,"version":"40439","uuid":"f6fc644e-49e2-4781-ac8c-bcdfd7743dd0"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x13178ab07a88f065efe6d06089a6e6ab55ae8a15/0","rotation":[0,3.141592653589793,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[0.25,6.25,-4.25],"groupId":null,"version":"40439","uuid":"e095bd25-05b7-4746-a092-83cc7cb62b74"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/44000152","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-4.75,6.25,4.75],"groupId":null,"version":"40439","uuid":"af390bea-91ec-461c-ad11-53bf77a26ec5"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/44000098","position":[5.25,5.5,-4.25],"rotation":[0,3.141592653589793,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","groupId":null,"version":"40744","uuid":"3885a8b9-fb7a-4d34-b5bb-ff4eea8c2087"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/316000551","rotation":[0,4.71238898038469,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,5,-2.75],"groupId":null,"version":"40439","uuid":"84238450-34ed-4fc5-b78b-9082d9237e62"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/316000589","rotation":[0,4.71239,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,5.75,-1.75],"groupId":null,"version":"40439","uuid":"82008332-b3b7-4d00-9f42-08ecfdfa0b48"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/316000497","rotation":[0,4.71238898038469,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,5.75,-3.75],"groupId":null,"version":"40439","uuid":"43ebc7cf-ccee-44ea-965c-02ee1d9a83cc"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/316000354","rotation":[0,4.71238898038469,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,6.5,-2.75],"groupId":null,"version":"40439","uuid":"701d1739-c025-47e0-9c58-474c6f438f7f"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x30b541f1182ef19c56a39634b2fdaca5a0f2a741/4899","rotation":[0,3.14159,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[3.25,6.525,-4.25],"groupId":null,"version":"40744","uuid":"9df8c5bc-1318-4a14-9313-f8fede1d7ddc"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x92a50fe6ede411bd26e171b97472e24d245349b8/95","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[1.25,5.5,-4.25],"groupId":null,"version":"40439","uuid":"fa301e3d-ffdd-4933-a5ca-66f2befd7ef2"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x92a50fe6ede411bd26e171b97472e24d245349b8/102","rotation":[0,3.14159,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[2.25,4.75,-4.25],"groupId":null,"version":"40744","uuid":"1b57bc3d-7b43-4408-8d90-c7eb20976abc"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x99a9b7c1116f9ceeb1652de04d5969cce509b069/387000064","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[0,5,-4.25],"groupId":null,"version":"40439","uuid":"2801b2be-fa1a-4e46-846e-c7ed4339d581"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x99a9b7c1116f9ceeb1652de04d5969cce509b069/387000086","rotation":[0,3.141592653589793,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-1.25,5.75,-4.25],"groupId":null,"version":"40439","uuid":"b1d12291-3a47-43f1-9e40-9fddf76d8ffd"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x99a9b7c1116f9ceeb1652de04d5969cce509b069/387000090","rotation":[0,4.71239,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,6.25,-0.75],"groupId":null,"version":"40439","uuid":"f3afa9cd-1d97-4f09-9240-299050bc643b"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x92a50fe6ede411bd26e171b97472e24d245349b8/40","position":[1.5,6.5,4.75],"rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","groupId":null,"version":"40439","uuid":"f097101d-e219-454d-9669-0cc8e9394cd4"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/102000610","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[0.25,5.75,4.75],"groupId":null,"version":"40439","uuid":"e4458b5a-71ff-45c4-a0b0-ba0ed136ba90"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x30b541f1182ef19c56a39634b2fdaca5a0f2a741/4709","rotation":[0,4.71238898038469,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,5.25,3],"groupId":null,"version":"40439","uuid":"11a8ef88-9938-4f21-a8f8-8f5f7c899372"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xdddef0191f778df99db93652c77c1e7630b851bd/0","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-1.75,5.5,4.75],"groupId":null,"version":"40439","uuid":"6af9fe5f-5cc5-4ff7-856f-0d84a0ea716d"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x99a9b7c1116f9ceeb1652de04d5969cce509b069/387000007","rotation":[0,-1.5708,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,6.5,0.5],"groupId":null,"version":"40439","uuid":"cdfb8629-c32c-41f8-a859-c731b6e8376b"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0x99a9b7c1116f9ceeb1652de04d5969cce509b069/387000071","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-3.75,5.5,4.75],"groupId":null,"version":"40439","uuid":"b90b96e7-3128-431b-8904-4ad9e6f49b02"},{"type":"nft-image","scale":[1,0.7,0.01],"url":"https://opensea.io/assets/ethereum/0x495f947276749ce646f68ac8c248420045cb7b5e/108025279282686658453897007890629891637526310304717906993258638098494503518261","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-2.75,6.000000035762785,4.75],"groupId":null,"version":"40439","uuid":"29e5d924-2fb1-4b13-a0e6-6adee5a8bcbf"},{"type":"nft-image","scale":[1,0.7,0.01],"url":"https://opensea.io/assets/ethereum/0x9304d9116bb83ccedcc33ac4918adb9b1e104230/603","position":[-5.25,6.000000045980723,4],"rotation":[0,4.71238898038469,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","groupId":null,"version":"40744","uuid":"b95aa280-41e3-4553-af9c-e3bab6fa0ee1"},{"type":"nft-image","scale":[1,0.7,0.01],"url":"https://opensea.io/assets/ethereum/0x9304d9116bb83ccedcc33ac4918adb9b1e104230/0","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-2.75,4.750000034059795,4.75],"groupId":null,"version":"40439","uuid":"46d78bc7-d8e8-467d-abde-169f80122d64"},{"type":"nft-image","scale":[1,1,0.01],"url":"https://opensea.io/assets/ethereum/0xa8a425864db32fcbb459bf527bdbb8128e6abf21/137","rotation":[0,4.71239,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":true,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-5.25,4.75,2],"groupId":null,"version":"40439","uuid":"37a37c70-c17c-4d89-b755-ba7419c0c30c"},{"type":"image","scale":[0.6,1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207101794329825320/Mouse-cursor-hand-pointer-OG.png?ex=65de6c26&is=65cbf726&hm=0226746884075110f443d1d974a137164192b6d85d2fe15803d1189ae1a2aba2&","position":[5.75,2.5,-0.5],"rotation":[0,1.575,0.575],"version":"40439","uuid":"c5aeafec-ba6e-4fc0-83f6-28db6b98441c","stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine"},{"type":"image","scale":[0.6,1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207101794329825320/Mouse-cursor-hand-pointer-OG.png?ex=65de6c26&is=65cbf726&hm=0226746884075110f443d1d974a137164192b6d85d2fe15803d1189ae1a2aba2&","rotation":[0,1.5707963267948966,0.575],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[5.75,3.75,1.25],"version":"40439","uuid":"e502ecef-dfcc-4f23-aab6-0b4ec10f148d"},{"type":"image","scale":[0.6,1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207101794329825320/Mouse-cursor-hand-pointer-OG.png?ex=65de6c26&is=65cbf726&hm=0226746884075110f443d1d974a137164192b6d85d2fe15803d1189ae1a2aba2&","rotation":[0,1.5707963267948966,0.575],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[5.75,5.25,3],"version":"40439","uuid":"2421a9e3-bfdd-4948-b2dc-6d44dead8bfc"},{"type":"image","scale":[0.6,1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207101794329825320/Mouse-cursor-hand-pointer-OG.png?ex=65de6c26&is=65cbf726&hm=0226746884075110f443d1d974a137164192b6d85d2fe15803d1189ae1a2aba2&","rotation":[0,1.5707963267948966,0.575],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[5.75,6.2,-0.2],"version":"40744","uuid":"4af3f15a-313c-4b6e-b0c9-d0fe75df778d"},{"type":"image","scale":[0.6,1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207101794329825320/Mouse-cursor-hand-pointer-OG.png?ex=65de6c26&is=65cbf726&hm=0226746884075110f443d1d974a137164192b6d85d2fe15803d1189ae1a2aba2&","rotation":[0,1.5708,0.57421],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[5.75,6.9,1.25],"version":"40439","uuid":"1f3f1057-7cc4-4e7f-aeb9-8fa2e6f3fafd"},{"type":"image","scale":[0.6,1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207101794329825320/Mouse-cursor-hand-pointer-OG.png?ex=65de6c26&is=65cbf726&hm=0226746884075110f443d1d974a137164192b6d85d2fe15803d1189ae1a2aba2&","rotation":[0,1.5707963267948966,0.575],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[5.75,8.33,3.25],"version":"40439","uuid":"e0982fac-6591-43ca-9f89-a02aa8c42ae7"},{"scale":[1,1,1],"type":"group","rotation":[0,0,0],"id":"Hackertisch","position":[0,2.1,0.4],"version":"40439","uuid":"5f5be291-ad49-4cd1-8130-87261dc8dbe2"},{"scale":[1,1,1],"type":"group","position":[-1.84,0.49,1.88],"rotation":[0,0,0],"id":"M Q 3er","groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"1e44b322-39c2-4eba-9ecb-55647aefa6b7"},{"scale":[1,1,1],"type":"group","rotation":[-0.2618,0,0],"id":"Monitor 1","position":[1.93,-0.09999995694599784,-2.7499999842133604],"groupId":"b5e51dbe-2b4f-4174-9192-5bd485133d02","version":"40439","uuid":"676564b1-cb8c-4aa4-b304-f04fe7566842"},{"scale":[0.9999999961036128,1,0.9999999961036128],"type":"group","rotation":[0,0.7250000371065112,0],"id":"M H 2er 2","position":[1.5924998397704888,0.46254992485046387,1.925000175733771],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"b5e51dbe-2b4f-4174-9192-5bd485133d02"},{"scale":[1,1,1],"type":"group","rotation":[-0.5236,0,0],"id":"Monitor 1","position":[1.93,0.550000007469029,-2.9500000400611555],"groupId":"1e44b322-39c2-4eba-9ecb-55647aefa6b7","version":"40439","uuid":"b9439324-6aa0-46c0-b03f-ec8ad093833b"},{"scale":[1,1,1],"type":"group","rotation":[0,0,0],"id":"Monitor 2 Hoch","position":[-0.43,0,0],"groupId":"a07a41b2-c7a4-4c9c-89e4-9eaefd6a92b1","version":"40439","uuid":"bb25550f-5e48-4fed-add4-b40cf54b9198"},{"scale":[1,1,1],"type":"group","rotation":[0,1.39975,0],"id":"M H 2er 2","position":[4.41,0.51,-1.8],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"8d626d6e-6b17-46f6-aeab-a462318a8f33"},{"scale":[1,1,1],"type":"group","position":[2.35,1.450000019402397,-1.8499999659731545],"rotation":[-0.2618,0,0],"id":"Monitor 2 Hoch Schweben","groupId":"a07a41b2-c7a4-4c9c-89e4-9eaefd6a92b1","version":"40439","uuid":"1d8d4c30-f04a-4a8c-8efe-2be2302ba6db"},{"scale":[1,1,1],"type":"group","position":[1.93,-0.85,-2.72],"rotation":[0,0,0],"id":"Monitor 1","groupId":"1e44b322-39c2-4eba-9ecb-55647aefa6b7","version":"40439","uuid":"7dbaf3c6-55a6-4445-80a9-500ce23f6822"},{"scale":[0.999999991355617,1,0.999999991355617],"type":"group","rotation":[0,-0.7243099985715626,0],"id":"M H 2er 2","position":[-4.367499752829941,0.512549877166748,-0.5750000377426745],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"38b338eb-66ef-472a-bc51-a0d53b3ce48c"},{"scale":[1,1,1],"type":"group","rotation":[-0.2618,0,0],"id":"Monitor 1","position":[1.93,-0.09999995694599784,-2.7499999842133604],"groupId":"1e44b322-39c2-4eba-9ecb-55647aefa6b7","version":"40439","uuid":"f5ef0f00-d1f4-4287-8f88-b1503ec2b7a4"},{"scale":[1,1,1],"type":"group","position":[-4.41,0.54,-1.65],"rotation":[0,-1.3999999998222317,0],"id":"M H 2er","groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"a07a41b2-c7a4-4c9c-89e4-9eaefd6a92b1"},{"scale":[1,1,1],"type":"group","position":[1.93,-0.85,-2.72],"rotation":[0,0,0],"id":"Monitor 1","groupId":"38b338eb-66ef-472a-bc51-a0d53b3ce48c","version":"40439","uuid":"ca074b30-2add-4960-98ca-d099212847f4"},{"scale":[1,1,1],"type":"group","position":[2.35,1.45,-1.85],"rotation":[-0.2618,0,0],"id":"Monitor 2 Hoch Schweben","groupId":"8d626d6e-6b17-46f6-aeab-a462318a8f33","version":"40439","uuid":"999cbd5d-54ca-4eec-8020-20a7b167cba0"},{"type":"nft-image","scale":[1.2,0.7,0.01],"url":"https://opensea.io/assets/ethereum/0x59facea786c01a178f0d5bbeff8be8ba7091d0bd/2","rotation":[0,0.72431,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":false,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[1.3,-0.1,-1.2],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"acf22ee1-c7f4-49ae-b82f-2863f959e95f"},{"type":"nft-image","scale":[1.2000000476837158,0.699999988079071,0.009999999776482582],"url":"https://opensea.io/assets/ethereum/0x59facea786c01a178f0d5bbeff8be8ba7091d0bd/4","rotation":[0,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":false,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[0.012500018080075854,-0.06244993252379505,-0.7503999137997643],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"0f53ec2d-5fbd-4a77-801b-fb249de86baa"},{"type":"nft-image","scale":[1.1999999975257722,0.699999988079071,0.01000000006970387],"url":"https://opensea.io/assets/ethereum/0x59facea786c01a178f0d5bbeff8be8ba7091d0bd/6","position":[-1.2672347810902915,-0.08745002806152631,-1.305299637930152],"rotation":[0,-0.7243099985715626,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":false,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"9061c447-2dbf-4cc5-920a-be8b57898078"},{"type":"nft-image","scale":[1.2000000476837158,0.6999999703436193,0.010000000119657619],"url":"https://opensea.io/assets/ethereum/0x59facea786c01a178f0d5bbeff8be8ba7091d0bd/1","rotation":[-0.26180000335396936,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":false,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[0.012500018080075854,0.6624466170184122,-0.8453860830939963],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"79986553-3e41-4197-9a4f-2dd3c09ec485"},{"type":"nft-image","scale":[1.2,0.7,0.01],"url":"https://opensea.io/assets/ethereum/0x59facea786c01a178f0d5bbeff8be8ba7091d0bd/5","rotation":[-0.2618,-0.72431,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":false,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[-1.275,0.75,-1.3],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"62e608ea-00f8-4517-bdd4-171b67dbb54b"},{"scale":[1,1,1],"type":"group","rotation":[0,0,0],"id":"Monitor 2 Hoch","position":[-0.43,0,0],"groupId":"8d626d6e-6b17-46f6-aeab-a462318a8f33","version":"40439","uuid":"24d789e0-b1c6-43a6-bf38-6efc47f6a47d"},{"type":"vox-model","scale":[1.9999999319525326,2.000000052668813,2.0000000469139887],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946340043628564/Monitor-v6.vox?ex=65dddb5f&is=65cb665f&hm=a60eb8d4d7560af023a17c6092643f39f9f8c1132f1810e26eef7d95e9926f69&","flipX":true,"rotation":[0.26180000499663314,2.4260100011849905,0],"position":[-1.138196296869002,0.18325527187019203,-1.216680452374127],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"43740de3-c1c4-4393-a57c-6421b1424ea6"},{"type":"nft-image","scale":[1.2,0.7,0.01],"url":"https://opensea.io/assets/ethereum/0x59facea786c01a178f0d5bbeff8be8ba7091d0bd/0","rotation":[-0.2618,0.72431,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":false,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[1.2,0.675,-1.3],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"405433de-d777-4c50-81f0-bc39bc53e35f"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946340043628564/Monitor-v6.vox?ex=65dddb5f&is=65cb665f&hm=a60eb8d4d7560af023a17c6092643f39f9f8c1132f1810e26eef7d95e9926f69&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[0.08,-0.27,-0.03],"groupId":"f5ef0f00-d1f4-4287-8f88-b1503ec2b7a4","version":"40439","uuid":"2e885c5e-3926-45a3-865d-139ef1b0a18f"},{"type":"vox-model","scale":[2.0000000571645975,2,2.0000000571645975],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946337757597756/Monitor-v1.vox?ex=65dddb5e&is=65cb665e&hm=31bce78637eb7a40248c337a55458e6572b1053804dd1408d3416d2c8c28a2ec&","flipX":true,"rotation":[0,-2.3999999892159187,0],"position":[1.3415370673113773,-0.6624500751495361,-1.3910085656834514],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"b3a0ed51-b793-4174-a7ec-bb9a2c4754bf"},{"type":"nft-image","scale":[1.2000000476837158,0.6999999729829913,0.00999999968008817],"url":"https://opensea.io/assets/ethereum/0x99a9b7c1116f9ceeb1652de04d5969cce509b069/457000671","rotation":[-0.5236000144580193,0,0],"hasGui":true,"hasGuiResizable":false,"hasFrame":true,"inverted":false,"color":false,"stretch":false,"pixelated":false,"transparent":false,"emissiveColorIntensity":"0.50","nftFrameStyle":"classic","position":[0.012500018080075854,1.337350001609794,-1.1003461072158571],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"d7440fb8-92cf-4f55-a3ec-f65eb2cc8e8d"},{"type":"vox-model","scale":[1.2500000252070937,1.25,1.2500000252070937],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207051987972268162/Tastatur-v1.vox?ex=65de3dc3&is=65cbc8c3&hm=5037587308b398b6685ef2fb66310f7414d82a777349a65e99bf5b0490a02ec8&","flipX":true,"rotation":[0,3.0249999980927393,0],"position":[-0.018316407252272626,-0.6374499892808494,-1.1253392996504605],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"156a23c5-29d6-4ea5-a9df-a416db274362"},{"type":"vox-model","scale":[1.25,1.25,1.25],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946337392959528/Laptop-v1.vox?ex=65dddb5e&is=65cb665e&hm=d6ebca8ffe58ef2b9e42320da67d4d16983d72685347a949b23a2442a5c7d097&","flipX":true,"rotation":[0,2.099999994939693,0],"position":[-1.43,-0.64,-1.77],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40748","uuid":"8780249f-c2d7-43e7-8e6d-0dfbf562eecf"},{"type":"vox-model","scale":[1.7,1,1.6],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946340370911242/Rolli-v1.vox?ex=65dddb5f&is=65cb665f&hm=29e500d51dff87426ffe6c0f9f6d23a4fb5e5f4b2032ca10abe63660d3827ad4&","flipX":true,"rotation":[0,-0.6999999736312139,0],"position":[1.45,-1.34,-1.7],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40748","uuid":"eb3c2908-8126-4871-91b4-8680826f9c6f"},{"type":"vox-model","scale":[0.6999999840015037,0.699999988079071,0.6999999840015037],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207054215336173638/Maus-v1.vox?ex=65de3fd6&is=65cbcad6&hm=bd3bc0f44c9cc47162785576180b727346faf7dfe18301c3b0547b45a1b49189&","flipX":true,"rotation":[0,2.8499999794071615,0],"position":[0.5344507026515349,-0.6374499841243876,-1.2181816885776438],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"803a1627-287e-4bd7-9615-7160873354be"},{"type":"vox-model","scale":[7.1,3.2,5],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207046330006896690/Burotisch-v2.vox?ex=65de387e&is=65cbc37e&hm=eb92ea981743aa8382bf33c67600522af357cfdb1f960f7af35a8385a86e4a15&","flipX":true,"position":[0.56,-1.34,-1.82],"rotation":[0,3.14159,0],"collidable":false,"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"7eb7dc55-33fe-4ad4-b205-4134fcac2eea"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946337757597756/Monitor-v1.vox?ex=65dddb5e&is=65cb665e&hm=31bce78637eb7a40248c337a55458e6572b1053804dd1408d3416d2c8c28a2ec&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[0.08,-0.27,-0.009999999999999998],"groupId":"ca074b30-2add-4960-98ca-d099212847f4","version":"40439","uuid":"77b7f3ea-8aea-4465-adc9-e858ccee246d"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946337757597756/Monitor-v1.vox?ex=65dddb5e&is=65cb665e&hm=31bce78637eb7a40248c337a55458e6572b1053804dd1408d3416d2c8c28a2ec&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[0.07999999999999999,-0.27,-0.05000000000000001],"groupId":"7dbaf3c6-55a6-4445-80a9-500ce23f6822","version":"40439","uuid":"9e425a01-817e-4096-9b7a-ccab62d237aa"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946340043628564/Monitor-v6.vox?ex=65dddb5f&is=65cb665f&hm=a60eb8d4d7560af023a17c6092643f39f9f8c1132f1810e26eef7d95e9926f69&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[0.08,-0.27,-0.009999999999999998],"groupId":"676564b1-cb8c-4aa4-b304-f04fe7566842","version":"40439","uuid":"d4b859a8-1257-42e0-bd97-38470ab8ca39"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946340043628564/Monitor-v6.vox?ex=65dddb5f&is=65cb665f&hm=a60eb8d4d7560af023a17c6092643f39f9f8c1132f1810e26eef7d95e9926f69&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[0.08,-0.27,-0.009999999999999998],"groupId":"b9439324-6aa0-46c0-b03f-ec8ad093833b","version":"40439","uuid":"bae704ee-7097-49c9-984a-47690a2446a1"},{"type":"vox-model","scale":[3.1999999843730906,2.4000000953674316,3.1999999843730906],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207028409235021864/Burosessel-v1.vox?ex=65de27ce&is=65cbb2ce&hm=2150feacf2d304fd41070a66dcdff1f1a9b0ac76d55f2a820a9d70d441e15812&","flipX":true,"rotation":[0,2.8249999926106573,0],"position":[0.12264972660329365,-1.3374500487240146,-1.8033614431252132],"groupId":"5f5be291-ad49-4cd1-8130-87261dc8dbe2","version":"40439","uuid":"9162d807-e456-446e-b706-bb7ac63a0b00"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946339741507595/Monitor-v5.vox?ex=65dddb5f&is=65cb665f&hm=851c25de0d84d70df275df289d438e1a14408b78d704012a3870317225c3ad66&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[-2.299999952316284,-1.2000000476837158,-1.1900000381469726],"groupId":"1d8d4c30-f04a-4a8c-8efe-2be2302ba6db","version":"40439","uuid":"a392f5e4-d039-4a55-9be5-5dfd9c81e5ef"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946339095838841/Monitor-v3.vox?ex=65dddb5f&is=65cb665f&hm=435837d3fa8bc135ec2e2be63f03f5bc0fa93c1d518795aa2d991f94f1030fd1&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[0.48,-1.14,-2.75],"groupId":"bb25550f-5e48-4fed-add4-b40cf54b9198","version":"40439","uuid":"48c8cfa2-4a34-445e-840d-bd2f015702ad"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946339095838841/Monitor-v3.vox?ex=65dddb5f&is=65cb665f&hm=435837d3fa8bc135ec2e2be63f03f5bc0fa93c1d518795aa2d991f94f1030fd1&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[0.48,-1.14,-2.73],"groupId":"24d789e0-b1c6-43a6-bf38-6efc47f6a47d","version":"40439","uuid":"017aea41-0d0a-4453-8d55-c1da217639e1"},{"type":"vox-model","scale":[2,2,2],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946339741507595/Monitor-v5.vox?ex=65dddb5f&is=65cb665f&hm=851c25de0d84d70df275df289d438e1a14408b78d704012a3870317225c3ad66&","flipX":true,"rotation":[0,3.141592653589793,0],"position":[-2.299999952316284,-1.2000000476837158,-1.1700000381469726],"groupId":"999cbd5d-54ca-4eec-8020-20a7b167cba0","version":"40439","uuid":"3995dd9e-b900-4d80-9ea7-088866a16b2c"},{"type":"image","scale":[0.7,1.15,0.01],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207069807028084736/Ronamerch.gif?ex=65de4e5c&is=65cbd95c&hm=27cedc9fa486ca52b35e3ba200a7f6c30ba173cbd659d9c9a1a129f85639bca6&","rotation":[0,0,0],"blendMode":"Combine","stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[0.325,-0.45,-2.575],"groupId":"bb25550f-5e48-4fed-add4-b40cf54b9198","version":"40439","uuid":"46a44270-2f88-4aa9-b3ed-247764bdd6d3"},{"type":"image","scale":[0.7,1.1,0.01],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207069805828382741/fastcashmonesplus.gif?ex=65de4e5b&is=65cbd95b&hm=e0a662a787dd494bc20d63b4b14d26e5c198360b7613dabb865542430351ce9d&","rotation":[0,0,0],"blendMode":"Combine","stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[-2.4500000166893,-0.46999999337846543,-1.050099976528436],"groupId":"1d8d4c30-f04a-4a8c-8efe-2be2302ba6db","version":"40439","uuid":"a1430955-8842-4a9a-8a7c-0d4029f4ff2b"},{"type":"image","scale":[0.7,1.1,0.01],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207070676507430993/Farben.gif?ex=65de4f2b&is=65cbda2b&hm=eb5a024f19f6ee688831b7d0bc2714bd6ff6d2119b11683a8a9af3b2633cdaa7&","rotation":[0,0,0],"blendMode":"Combine","stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[-2.4500000166893,-0.46999999337846543,-1.050099976528436],"groupId":"999cbd5d-54ca-4eec-8020-20a7b167cba0","version":"40439","uuid":"2e2c75a1-44bd-4f5c-9c61-e00ef06a854e"},{"type":"image","scale":[0.7,1.15,0.01],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207069806306529431/fastcash.gif?ex=65de4e5c&is=65cbd95c&hm=84d8c521baaa7ce43e09e2d87ee6ea9d8cf63e295667a0df387fcf3eb93a083b&","rotation":[0,0,0],"blendMode":"Combine","stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[0.325,-0.45,-2.575],"groupId":"24d789e0-b1c6-43a6-bf38-6efc47f6a47d","version":"40439","uuid":"1132ed05-8df2-4753-b5a8-2d89137cd783"},{"type":"image","scale":[10,13,0.01],"url":"https://cdn.discordapp.com/attachments/655564024452218880/1201468744673808384/Blue-Tile.png?ex=65dc62f6&is=65c9edf6&hm=0352cd45d45fe50925f24cca1f07677f2338dc821d1ad4b2e38bd9a97f9b12a6&","rotation":[0,-1.5707963267948966,0],"position":[6.26,6.7,0.25],"version":"40754","uuid":"1e20012a-2da2-46b0-8049-93a1d8b52472","stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1},{"type":"image","scale":[12,6,0.01],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207118416029290556/Gray-Tile-v3.png?ex=65de7ba1&is=65cc06a1&hm=d3b47316d8a2eeef0c238b2cf3492ec966958a09f94f4395317c01ef746b2bea&","rotation":[0,0,0],"stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[0.25,10.2,5.25],"version":"40744","uuid":"277d00f2-a2a5-4407-8df9-a7f946b14897","blendMode":"Combine"},{"type":"image","scale":[9,3.1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207118416029290556/Gray-Tile-v3.png?ex=65de7ba1&is=65cc06a1&hm=d3b47316d8a2eeef0c238b2cf3492ec966958a09f94f4395317c01ef746b2bea&","position":[-0.75,2.23,0.75],"rotation":[0,3.14159,0],"version":"40439","uuid":"d06462f5-fdde-4449-90ae-a269a4004c7f","blendMode":"Combine","stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1},{"type":"image","scale":[10,3.1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207118416029290556/Gray-Tile-v3.png?ex=65de7ba1&is=65cc06a1&hm=d3b47316d8a2eeef0c238b2cf3492ec966958a09f94f4395317c01ef746b2bea&","rotation":[0,3.14159,0],"blendMode":"Combine","stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[-0.75,2.25,0.25],"version":"40439","uuid":"1288dd8f-bcce-4f6d-b66b-5dcb109017b8"},{"type":"image","scale":[2.5,2.5,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217225793185251378/4x3-Tile-2.png?ex=660340dc&is=65f0cbdc&hm=eb45cbaab2ed1cdd27382032fffa6cbb3a41a6bce8884c9c2ed2c14553886729&","position":[-3.5,2,1.25],"rotation":[0,3.14159,0],"version":"40744","uuid":"3b8c0f75-3bcb-4689-aa7b-f9999936814d","blendMode":"Combine","stretch":true,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1},{"type":"image","scale":[2.5,2.5,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217225793185251378/4x3-Tile-2.png?ex=660340dc&is=65f0cbdc&hm=eb45cbaab2ed1cdd27382032fffa6cbb3a41a6bce8884c9c2ed2c14553886729&","rotation":[0,3.14159,0],"blendMode":"Combine","stretch":true,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[-1,2,1.25],"version":"40744","uuid":"6dfcce8a-6e44-4cba-a8b9-f6e328324f1a"},{"type":"image","scale":[2.5,2.5,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217225793185251378/4x3-Tile-2.png?ex=660340dc&is=65f0cbdc&hm=eb45cbaab2ed1cdd27382032fffa6cbb3a41a6bce8884c9c2ed2c14553886729&","rotation":[0,3.14159,0],"blendMode":"Combine","stretch":true,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[1.5,2,1.25],"version":"40744","uuid":"7cebfb8d-eacd-42f2-bdd5-b8624894c28f"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","position":[-2.25,1.88,2.75],"rotation":[0,-1.5707963267948966,0],"version":"40744","uuid":"4d9eadf7-2f47-499a-b843-00c687dae0cb","animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}}},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[-0.25,0.9,2.75],"version":"40744","uuid":"badb34f2-4ce8-4e79-99b9-fdb4d49e13f5"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[1.75,0.9,2.75],"version":"40744","uuid":"0f5b7d0f-1e30-4739-8e4e-830656023bf7"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[-1.75,0.9,3.5],"version":"40744","uuid":"125eb137-1b27-4b9b-8e76-cd131d1b3a15"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[-4,0.9,3.5],"version":"40744","uuid":"202ab9ce-ed7a-44a3-8edb-4646d1396036"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[-4.35,2.25,1.75],"version":"40744","uuid":"9fba2b22-bf8d-4889-a78f-8bc466b1250f"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[-1.48,2.75,2.65],"version":"40744","uuid":"880ffbd1-24ca-4f2f-be4a-b98a7c9d69e9"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[1.43,2.5,1.93],"version":"40744","uuid":"cfef0844-d70d-4c06-b08a-62e1151f0c4b"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[2.85,2.5,3.5],"version":"40744","uuid":"a254db4c-751f-46cc-9980-6db24674aff0"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[2.85,1.75,2.5],"version":"40744","uuid":"defb9b3f-990d-44a3-9c65-462b7e6e4e55"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[1.18,2.25,3.6],"version":"40744","uuid":"03b59484-1491-4389-b923-afef5ff46055"},{"type":"cube","scale":[0.8,0.3,0],"url":"https://i.seadn.io/gae/1-K54vc4P9iWiZGTrG8FP9MuTgQzrFwPgUFz21Cey1gkjmfNnietCYitZBZNBdHuOPUbe-Bbv1_bB094oO3l0-T5lt4lHCe3qeRcdMs?w=1024&auto=format","rotation":[0,-1.5707963267948966,0],"animation":{"destination":"rotation","keyframes":[{"frame":0,"value":[0,0,0]},{"frame":120,"value":[0,6.26573,0]}],"easing":{}},"position":[-1.18,2.5,3.52],"version":"40744","uuid":"de12c684-3dcb-487d-b224-8f7fd4439e92"},{"type":"spawn-point","scale":[1,1,1],"position":[-0.25,0.8,-4.25],"rotation":[0,0,0],"version":"40439","uuid":"50d87d7c-26d9-418b-88fa-0bef820ad91f"},{"type":"image","scale":[12,6,0.01],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207118416029290556/Gray-Tile-v3.png?ex=65de7ba1&is=65cc06a1&hm=d3b47316d8a2eeef0c238b2cf3492ec966958a09f94f4395317c01ef746b2bea&","rotation":[1.5708,0,0],"stretch":false,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[0.23,7.73,0.75],"version":"40744","uuid":"4b6e0786-0513-488b-a856-407c2e3ea8da"},{"type":"particles","scale":[1,1,1],"rotation":[-0.7,0.225,-0.35],"color1":"#ffffff","color2":"#ffffff","colorDead":"#ffffff","opacityDead":1,"gravity":7,"emitRate":146,"minSize":0.22,"maxSize":0.9,"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207146723491971232/Money-2.png?ex=65de95fe&is=65cc20fe&hm=1a8536f6f3351c0fb536279e16dbcbe7fb5ca2d8efb22aac85b007d88829c964&","position":[1.5,12.25,3.4],"version":"40754","uuid":"9724d746-f93c-4ff3-bcc2-d47c2141b05e"},{"type":"particles","scale":[1,1,1],"rotation":[-0.75,-1.6,0.025],"color1":"#ffffff","color2":"#ffffff","colorDead":"#ffffff","opacityDead":1,"gravity":4,"emitRate":86,"minSize":0.22,"maxSize":0.9,"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207146722338283530/Money-1.png?ex=65de95fe&is=65cc20fe&hm=0f98c82a4a217cf65eeafcdf4b198583092d14896385368839f6a997433c8e40&","position":[-2.6,12.65,-1.775],"version":"40744","uuid":"42f17da1-93d2-4521-85ae-fccf879da173"},{"type":"image","scale":[2.5,2.5,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217225793185251378/4x3-Tile-2.png?ex=660340dc&is=65f0cbdc&hm=eb45cbaab2ed1cdd27382032fffa6cbb3a41a6bce8884c9c2ed2c14553886729&","rotation":[0,3.14159,0],"blendMode":"Combine","stretch":true,"pixelated":false,"transparent":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"position":[2,2,1.26],"version":"40744","uuid":"284351fd-e982-4d97-9f90-d40978d49bf3"},{"type":"image","scale":[3,1.65,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217227562216980541/DYOR-NFA-Saule1-Text.png?ex=66034281&is=65f0cd81&hm=f392cdf957cc906404f470099a575e9506d7f0b093d4d60766b140e3da040338&","position":[-5.25,2.25,-2.33],"rotation":[0,4.71239,0],"version":"40744","uuid":"80545225-f476-4cc8-82ad-7e9542abf6ff","stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine"},{"type":"image","scale":[2.1,1.73,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217230040379687073/DYOR-NFA-Saule3.png?ex=660344d0&is=65f0cfd0&hm=33d4ed4170adecce2fb62116e93f90a3559eaae4e035d2df6fcb43dab3cb8461&","rotation":[0,0,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[-3.575,2.05,0.25],"version":"40744","uuid":"9e8716af-d235-4d37-8524-48dab3ce84bd"},{"type":"image","scale":[3,1.65,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217228817584754841/DYOR-NFA-Saule2.png?ex=660343ad&is=65f0cead&hm=1a0a566788e0d4796e9bd25e85ea0001494de3afa89b6c859f17bbc504a79747&","rotation":[0,1.5708,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[5.75,2.25,-2.75],"version":"40744","uuid":"fec61787-d591-4075-870e-37e1830d6bbb"},{"type":"youtube","scale":[2.7,1.35,0],"url":"https://www.youtube.com/watch?v=xz_dSzM5L4E&t=8s","position":[3.75,5.95,1.75],"rotation":[0,1.5707963267948966,0],"version":"40744","uuid":"0577e988-111b-48ca-bb78-8f2bf03f520c","autoplay":false,"previewUrl":"https://cdn.discordapp.com/attachments/1206945922274041937/1217231091975589929/Screenshot_2024-03-12_230136.png?ex=660345cb&is=65f0d0cb&hm=8950ac98de4fa472c941cdec9f6034cbb6496d66cbbac58ffff194c401862d8c&","inverted":false,"rolloffFactor":1.2,"volume":0.7},{"type":"sign","scale":[0.97,0.5,0.5],"text":"Press to play","position":[3.75,5.1,1.75],"rotation":[0,1.5707963267948966,0],"version":"40744","uuid":"00588df3-1f18-41d0-acd1-b05b6d485001","color":"#ffffff","background":"#000000","blendMode":"Screen","fontSize":16},{"type":"image","stretch":true,"transparent":true,"blendMode":"Combine","scale":[1,1.45,0],"position":[3.25,5.975,4.75],"rotation":[0,0,0],"version":"40744","uuid":"12a25919-997f-4b5d-922b-482f52a347bd","url":"https://media.crvox.com/0x3fbf3747128c03d0715438e6e1fcd9df8aa27b0a/Screenshot%202024-03-12%20230750_f7d34f9b0d99bc7c548a9c9a37dc0658.png","link":"https://opensea.io/assets/zora/0x6d541dec34fb2921b71ee79fabf37dedf96e580c/10"},{"type":"image","stretch":true,"transparent":true,"blendMode":"Combine","scale":[0.99,1,0],"position":[-4,6.5,-4.25],"rotation":[0,3.141592653589793,0],"version":"40744","uuid":"5c90035c-b4a5-418c-9807-8c7091c629d6","url":"https://media.crvox.com/0x3fbf3747128c03d0715438e6e1fcd9df8aa27b0a/Screenshot%202024-03-12%20231306_23fca58c1e5c268ad292b4a33bd79e1c.png","link":"https://opensea.io/assets/ethereum/0x1c218412046fdfcd561806be1dcb2c94307be625/0"},{"type":"image","stretch":true,"transparent":true,"blendMode":"Combine","scale":[1,1.43,0],"position":[-2.5,6,-4.25],"rotation":[0,3.14159,0],"version":"40744","uuid":"4f8deb44-cf8f-4e41-bbfd-8c95dcf86bda","url":"https://media.crvox.com/0x3fbf3747128c03d0715438e6e1fcd9df8aa27b0a/Screenshot%202024-03-12%20231428_8f00033d562b4c6944c42d7283acf805.png","link":"https://zora.co/collect/zora:0x6d541dec34fb2921b71ee79fabf37dedf96e580c/9"},{"type":"image","stretch":true,"transparent":true,"blendMode":"Combine","scale":[1,1,0],"position":[2.25,6.25,-4.25],"rotation":[0,3.14159,0],"version":"40744","uuid":"eee30962-d162-4e9e-9a1f-2f4e5b323a44","url":"https://media.crvox.com/0x3fbf3747128c03d0715438e6e1fcd9df8aa27b0a/Screenshot%202024-03-12%20231727_cb07989afd43a37047e705cb5ee01d14.png","link":"https://opensea.io/assets/ethereum/0x41d3d86a84c8507a7bc14f2491ec4d188fa944e7/287"},{"type":"richtext","scale":[4.3,8.4,0],"text":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n\n/**\n\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    // function toHexString(uint256 value) internal pure returns (string memory) {\n    //     if (value == 0) {\n    //         return \"0x00\";\n    //     }\n    //     uint256 temp = value;\n    //     uint256 length = 0;\n    //     while (temp != 0) {\n    //         length++;\n    //         temp >>= 8;\n    //     }\n    //     return toHexString(value, length);\n    // }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    // function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n    //     bytes memory buffer = new bytes(2 * length + 2);\n    //     buffer[0] = \"0\";\n    //     buffer[1] = \"x\";\n    //     for (uint256 i = 2 * length + 1; i > 1; --i) {\n    //         buffer[i] = _HEX_SYMBOLS[value & 0xf];\n    //         value >>= 4;\n    //     }\n    //     require(value == 0, \"Strings: hex length insufficient\");\n    //     return string(buffer);\n    // }\n}\n\n\n\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    // function _safeMint(address to, uint256 tokenId) internal virtual {\n    //     _safeMint(to, tokenId, \"\");\n    // }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    // function _safeMint(\n    //     address to,\n    //     uint256 tokenId,\n    //     bytes memory _data\n    // ) internal virtual {\n    //     _mint(to, tokenId);\n    //     require(\n    //         _checkOnERC721Received(address(0), to, tokenId, _data),\n    //         \"ERC721: transfer to non ERC721Receiver implementer\"\n    //     );\n    // }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        // _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        // _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        // _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    // function _beforeTokenTransfer(\n    //     address from,\n    //     address to,\n    //     uint256 tokenId\n    // ) internal virtual {}\n}","position":[-0.75,7.25,-2.125],"rotation":[-1.5708,-1.5708,0],"version":"40754","uuid":"6c5f6c77-1512-4822-bdc2-3a8327d0406a","inverted":true},{"type":"richtext","scale":[5.3,8.4,0],"text":"// SPDX-License-Identifier: CC0\n\n\n/*\n████████ ██   ██ ██████  ███████ ███████\n   ██    ██   ██ ██   ██ ██      ██\n   ██    ███████ ██████  █████   █████\n   ██    ██   ██ ██   ██ ██      ██\n   ██    ██   ██ ██   ██ ███████ ███████\n\n\n██████   █████  ██      ██      ███████\n██   ██ ██   ██ ██      ██      ██\n██████  ███████ ██      ██      ███████\n██   ██ ██   ██ ██      ██           ██\n██████  ██   ██ ███████ ███████ ███████\n\n\n ██████  ██████  ██ ██████\n██       ██   ██ ██ ██   ██\n██   ███ ██████  ██ ██   ██\n██    ██ ██   ██ ██ ██   ██\n ██████  ██   ██ ██ ██████\n\n\n\nCC0 2023 - steviep.eth\n*/\n\n\nimport \"./ThreeBallsGrid.sol\";\n\n\npragma solidity ^0.8.23;\n\ninterface IFree19 {\n  function lastAssigned() external view returns (uint256);\n  function claimer() external view returns (address);\n}\n\ncontract ThreeBallsGridMinter {\n  IFree19 public free19 = IFree19(0xaBCeF3a4aDC27A6c962b4fC17181F47E62244EF0);\n  address public baseContract;\n  mapping(address => uint256) public minterToTimestamp;\n\n\n  constructor() {\n    baseContract = msg.sender;\n  }\n\n  function mint() external {\n    require(free19.claimer() == msg.sender, 'Must be Free19 contract claimer');\n    require(free19.lastAssigned() + 30 minutes < block.timestamp, 'Must be Free19 contract claimer for > 30 minutes');\n    require(minterToTimestamp[msg.sender] + 15 minutes < block.timestamp, 'Must wait at least 15 minutes between mints');\n\n    minterToTimestamp[msg.sender] = block.timestamp;\n    ThreeBallsGrid(baseContract).mint(msg.sender);\n  }\n}\n\n// SPDX-License-Identifier: CC0\n\n\n/*\nFree Series 3 Deployer\n*/\n\n\npragma solidity ^0.8.23;\n\n\ninterface IFreeBase {\n  function owner() external view returns (address);\n  function transferOwnership(address newOwner) external;\n\n  function createCollection(\n    address minter,\n    string calldata _namePrefix,\n    string calldata _externalUrl,\n    string calldata _imgUrl,\n    string calldata _imgExtension,\n    string calldata _description\n  ) external;\n}\n\n\n\ncontract FreeSeries3CollectionCreator {\n  address public steviep = 0x47144372eb383466D18FC91DB9Cd0396Aa6c87A4;\n  IFreeBase public immutable free = IFreeBase(0x30b541f1182ef19c56a39634B2fdACa5a0F2A741);\n\n  function reclaimFreeOwnership() public {\n    require(msg.sender == steviep);\n    free.transferOwnership(steviep);\n  }\n\n  function register(address[] calldata freeAddrs) external {\n    require(msg.sender == steviep);\n\n    string memory url = 'https://steviep.xyz/free';\n    string memory imrUrl = 'ipfs://QmSV8dkHDYxGLBkex8MKdV5eNEUt2wcMPS4Jf8yNHaqxhu/';\n    string memory extension = '.jpg';\n\n    free.createCollection(freeAddrs[0], 'Free21 #', url, string(abi.encodePacked(imrUrl, '21')), extension, \"Free of charge\");\n    free.createCollection(freeAddrs[1], 'Free22 #', url, string(abi.encodePacked(imrUrl, '22')), extension, \"If it's free, you are the product\");\n    free.createCollection(freeAddrs[2], 'Free23 #', url, string(abi.encodePacked(imrUrl, '23')), extension, \"Ladies drink free\");\n    free.createCollection(freeAddrs[3], 'Free24 #', url, string(abi.encodePacked(imrUrl, '24')), extension, \"Free time\");\n    free.createCollection(freeAddrs[4], 'Free25 #', url, string(abi.encodePacked(imrUrl, '25')), extension, \"Free Tibet\");\n    free.createCollection(freeAddrs[5], 'Free26 #', url, string(abi.encodePacked(imrUrl, '26')), extension, \"Free Taiwan\");\n    free.createCollection(freeAddrs[6], 'Free27 #', url, string(abi.encodePacked(imrUrl, '27')), extension, \"Free Palestine\");\n    free.createCollection(freeAddrs[7], 'Free28 #', url, string(abi.encodePacked(imrUrl, '28')), extension, \"Free for the taking\");\n    free.createCollection(freeAddrs[8], 'Free29 #', url, string(abi.encodePacked(imrUrl, '29')), extension, \"Free trade\");\n    free.createCollection(freeAddrs[9], 'Free30 #', url, string(abi.encodePacked(imrUrl, '30')), extension, \"Freewheeling\");\n    free.createCollection(freeAddrs[10], 'Free31 #', url, string(abi.encodePacked(imrUrl, '31')), extension, \"Free and easy\");\n    free.createCollection(freeAddrs[11], 'Free32 #', url, string(abi.encodePacked(imrUrl, '32')), extension, \"Free parking\");\n    free.createCollection(freeAddrs[12], 'Free33 #', url, string(abi.encodePacked(imrUrl, '33')), extension, \"Free throw\");\n\n    reclaimFreeOwnership();\n    require(free.owner() == steviep);\n  }\n}\nCC0 2023\n*/\n\n\npragma solidity ^0.8.23;\n\n\nimport \"./FreeChecker.sol\";\nimport \"./ThreeBallsGrid.sol\";\n\ninterface GrailsV {\n  function ownerOf(uint256 tokenId) external returns (address owner);\n}\n\n\ncontract Free33 is FreeChecker {\n  ThreeBallsGrid public threeBallsGrid;\n  GrailsV public grailsV = GrailsV(0x92A50Fe6eDE411BD26e171B97472e24D245349B8);\n  mapping(uint256 => bool) public THREE_BALLS;\n\n  mapping(uint256 => uint256) public ballX;\n  mapping(uint256 => uint256) public ballY;\n\n  constructor() {\n    THREE_BALLS[12] = true;\n    THREE_BALLS[30] = true;\n    THREE_BALLS[36] = true;\n    THREE_BALLS[37] = true;\n    THREE_BALLS[38] = true;\n    THREE_BALLS[39] = true;\n    THREE_BALLS[40] = true;\n    THREE_BALLS[42] = true;\n    THREE_BALLS[46] = true;\n    THREE_BALLS[52] = true;\n    THREE_BALLS[54] = true;\n    THREE_BALLS[56] = true;\n    THREE_BALLS[57] = true;\n    THREE_BALLS[58] = true;\n    THREE_BALLS[59] = true;\n    THREE_BALLS[60] = true;\n    THREE_BALLS[64] = true;\n    THREE_BALLS[65] = true;\n    THREE_BALLS[66] = true;\n    THREE_BALLS[69] = true;\n    THREE_BALLS[70] = true;\n    THREE_BALLS[72] = true;\n    THREE_BALLS[77] = true;\n    THREE_BALLS[79] = true;\n    THREE_BALLS[80] = true;\n    THREE_BALLS[81] = true;\n    THREE_BALLS[86] = true;\n    THREE_BALLS[87] = true;\n    THREE_BALLS[90] = true;\n    THREE_BALLS[91] = true;\n    THREE_BALLS[94] = true;\n    THREE_BALLS[95] = true;\n    THREE_BALLS[98] = true;\n    THREE_BALLS[99] = true;\n    THREE_BALLS[101] = true;\n    THREE_BALLS[102] = true;\n\n    threeBallsGrid = new ThreeBallsGrid(msg.sender);\n  }\n\n  function ballCoords(uint256 tokenId) external view returns (uint256 x, uint256 y) {\n    return (ballX[tokenId], ballY[tokenId]);\n  }\n\n  function throwBall(uint256 grailsVTokenId) external {\n    require(grailsV.ownerOf(grailsVTokenId) == msg.sender, 'Only owner can throw');\n    require(THREE_BALLS[grailsVTokenId], 'Can only throw a ball');\n\n    uint256 hash = uint256(keccak256(abi.encodePacked(\n      block.prevrandao, block.gaslimit, grailsVTokenId\n    )));\n\n    ballX[grailsVTokenId] = 1 + hash % 6;\n    ballY[grailsVTokenId] = 1 + (hash / 100000) % 6;\n    threeBallsGrid.update();\n  }\n\n  function isLine(\n    int[2] memory ball_a,\n    int[2] memory ball_b,\n    int[2] memory ball_c\n  ) public pure returns (bool) {\n    return _isLine(ball_a, ball_b, ball_c) && _isLine(ball_b, ball_c, ball_a);\n  }\n\n  function isOutOfBounds(int[2] memory ball) external pure returns (bool) {\n    return _outOfBounds(ball[0]) || _outOfBounds(ball[1]);\n  }\n\n  function _outOfBounds(int n) internal pure returns (bool) {\n    return 1 > n || n > 6;\n  }\n\n  function _isLine(\n    int[2] memory ball_a,\n    int[2] memory ball_b,\n    int[2] memory ball_c\n  ) internal pure returns (bool) {\n    int ax = ball_a[0];\n    int ay = ball_a[1];\n\n    int bx = ball_b[0];\n    int by = ball_b[1];\n\n    int cx = ball_c[0];\n    int cy = ball_c[1];\n\n    if (\n      _outOfBounds(ax) ||\n      _outOfBounds(ay) ||\n      _outOfBounds(bx) ||\n      _outOfBounds(by) ||\n      _outOfBounds(cx) ||\n      _outOfBounds(cy)\n    ) return false;\n\n\n    int a_b_YDiff = by - ay;\n    int a_c_YDiff = cy - ay;\n\n    int a_b_XDiff = bx - ax;\n    int a_c_XDiff = cx - ax;\n\n    if (a_b_YDiff == 0 && a_c_YDiff == 0) return true;\n    if (a_b_YDiff == 0) return a_b_XDiff == 0;\n    if (a_c_YDiff == 0) return a_c_XDiff == 0;\n\n    return (\n      (a_b_XDiff * 60) / a_b_YDiff\n      ==\n      (a_c_XDiff * 60) / a_c_YDiff\n    );\n  }\n\n  function claim(\n    uint256 free0TokenId,\n    uint256 ownedBallTokenId,\n    uint256 supportingBallTokenId1,\n    uint256 supportingBallTokenId2\n  ) external {\n    preCheck(free0TokenId, '33');\n\n    require(grailsV.ownerOf(ownedBallTokenId) == msg.sender, 'Not owner of ball');\n    require(\n      ownedBallTokenId != supportingBallTokenId1 &&\n      ownedBallTokenId != supportingBallTokenId2 &&\n      supportingBallTokenId1 != supportingBallTokenId2,\n      'Invalid supporting balls'\n    );\n\n    require(isLine(\n        [int(ballX[ownedBallTokenId]), int(ballY[ownedBallTokenId])],\n        [int(ballX[supportingBallTokenId1]), int(ballY[supportingBallTokenId1])],\n        [int(ballX[supportingBallTokenId2]), int(ballY[supportingBallTokenId2])]\n      ),\n      'Balls not thrown in a straight line'\n    );\n\n    ballX[ownedBallTokenId] = 0;\n    ballY[ownedBallTokenId] = 0;\n\n    postCheck(free0TokenId, 33, '33');\n  }\n}","rotation":[-1.575,-1.575,0],"inverted":true,"position":[-0.75,7.25,1.975],"version":"40754","uuid":"03415b45-70fd-4bc8-a77e-88d2bd8e3789"},{"type":"particles","scale":[1,1,1],"rotation":[-0.45,-2.125,0.75],"color1":"#ffffff","color2":"#ffffff","colorDead":"#ffffff","opacityDead":1,"gravity":4,"emitRate":86,"minSize":0.22,"maxSize":0.9,"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207146722338283530/Money-1.png?ex=65de95fe&is=65cc20fe&hm=0f98c82a4a217cf65eeafcdf4b198583092d14896385368839f6a997433c8e40&","position":[-2.38,12,-0.03],"version":"40754","uuid":"3089f0c9-cafa-4f2d-9040-6a0cfd04c4fe"},{"type":"particles","scale":[1,1,1],"rotation":[-0.275,2.1,2.125],"color1":"#ffffff","color2":"#ffffff","colorDead":"#ffffff","opacityDead":1,"gravity":7,"emitRate":146,"minSize":0.22,"maxSize":0.9,"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207146723491971232/Money-2.png?ex=65de95fe&is=65cc20fe&hm=1a8536f6f3351c0fb536279e16dbcbe7fb5ca2d8efb22aac85b007d88829c964&","position":[3.73,12.28,-1.63],"version":"40754","uuid":"f63ce5cb-7d81-496f-8f0a-a69bd307f287"},{"type":"image","scale":[4,4,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217244209531322448/Haufen-Dollars.png?ex=66035202&is=65f0dd02&hm=f8427604c53cf893f4dc7933404a7e5c2aaade1181b625e50e129e51a22289f6&","position":[1.1,7.75,-0.23],"rotation":[1.5708,0,0],"version":"40744","uuid":"cbafb35f-5f05-45ab-9ef3-42df8c3e17f3","stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine"},{"type":"image","scale":[4,4,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217244209531322448/Haufen-Dollars.png?ex=66035202&is=65f0dd02&hm=f8427604c53cf893f4dc7933404a7e5c2aaade1181b625e50e129e51a22289f6&","rotation":[1.5707963267948966,0,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[-1.75,7.75,0.675],"version":"40744","uuid":"08f6f603-f424-433e-821a-a12d1b9af723"},{"type":"image","scale":[4,4,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217244209531322448/Haufen-Dollars.png?ex=66035202&is=65f0dd02&hm=f8427604c53cf893f4dc7933404a7e5c2aaade1181b625e50e129e51a22289f6&","rotation":[1.5707963267948966,0,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[0.75,7.75,2.25],"version":"40744","uuid":"7deb1270-0878-44e1-9369-b80b65794dc9"},{"type":"image","scale":[4,4,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217244209531322448/Haufen-Dollars.png?ex=66035202&is=65f0dd02&hm=f8427604c53cf893f4dc7933404a7e5c2aaade1181b625e50e129e51a22289f6&","rotation":[1.5707963267948966,0,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[3.25,7.75,-1.5],"version":"40744","uuid":"07b13c60-1390-4986-b4f3-f5b1a4045bad"},{"type":"image","scale":[4,4,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217244209531322448/Haufen-Dollars.png?ex=66035202&is=65f0dd02&hm=f8427604c53cf893f4dc7933404a7e5c2aaade1181b625e50e129e51a22289f6&","rotation":[1.5707963267948966,0,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[-2.5,7.75,-2],"version":"40744","uuid":"675414c7-ed76-4f59-8665-4f413fe80146"},{"type":"image","scale":[4,4,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217244209531322448/Haufen-Dollars.png?ex=66035202&is=65f0dd02&hm=f8427604c53cf893f4dc7933404a7e5c2aaade1181b625e50e129e51a22289f6&","rotation":[1.575,0,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[0.6,7.75,-2.75],"version":"40744","uuid":"b2fa66b4-7089-45a7-8970-7f679f413b58"},{"type":"image","scale":[3.2,1.3,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217228816687300700/DYOR-NFA-Saule4.png?ex=660343ac&is=65f0ceac&hm=7f377787ede51c3d51b42b7e49e4384b128fdabfe9516d9b7fe9cf6425bce0ea&","position":[5.75,5.38,-2.35],"rotation":[0,1.5707963267948966,0],"version":"40744","uuid":"bc49dc67-c3cd-425b-bb53-8e5d15f52b73","stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine"},{"type":"image","stretch":true,"transparent":true,"blendMode":"Combine","scale":[1,1,0],"position":[4.5,5.9,4.75],"rotation":[0,0,0],"version":"40744","uuid":"2bf68d04-4d7d-4ac3-9176-bc3a35b4ec9f","url":"https://media.crvox.com/0x3fbf3747128c03d0715438e6e1fcd9df8aa27b0a/2024-03-12-23-10-54_51416cd7940775ca453ae53baebc6878.gif","link":"https://opensea.io/assets/ethereum/0x13bbbefe251c94467d183821b663ef0bd0a8a722/0"},{"type":"image","stretch":true,"transparent":false,"blendMode":"Combine","scale":[1,1,0],"position":[3.25,5.25,-4.25],"rotation":[0,3.14159,0],"version":"40744","uuid":"9e2bb4c4-f233-4fd4-833c-d8e457a103f8","url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217268541116387338/2024-03-1223-18-19-ezgif.com-video-to-gif-converter.gif?ex=660368ab&is=65f0f3ab&hm=24c8cca0acbae9a2638c42a51390bfc2cb31ccf9a55001f84d568a7aea134677&","pixelated":false,"wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1},{"type":"image","scale":[0.6,1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207101794329825320/Mouse-cursor-hand-pointer-OG.png?ex=65de6c26&is=65cbf726&hm=0226746884075110f443d1d974a137164192b6d85d2fe15803d1189ae1a2aba2&","rotation":[1.5707963267948966,1.5707963267948966,0.575],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[4.28,0.75,-1.7],"version":"40754","uuid":"84e3da00-896e-45f7-bc37-77bfbc00464a"},{"type":"boombox","scale":[1,1,1],"position":[-2.15,7.75,4.47],"rotation":[0,1.5708,0],"version":"40748","uuid":"78a4b691-af1c-4f74-a465-029730cdc890","rolloffFactor":0.2,"authBroadcast":true},{"type":"guest-book","scale":[1,1,1],"signature_text":"Welcome!","position":[-5.1,8.7,3.2],"rotation":[-0.875,-1.575,0],"version":"40744","uuid":"f76b371a-ad78-4279-b5d0-c86c5ac43816"},{"type":"image","scale":[5.3,1.7,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217406312934146128/GFvcpYVW0AAKnXW-3.png?ex=6603e8fb&is=65f173fb&hm=e7f6f5093a9cce1b5290b89d7931d8ff69f28f7d1cb3edbb281d7fdfda3e0e31&","rotation":[0,4.71239,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[-5.25,10.1,0.68],"version":"40754","uuid":"a1807a86-93f2-4069-96ca-eaaffaaade95"},{"type":"image","scale":[8.5,3.22,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217406312934146128/GFvcpYVW0AAKnXW-3.png?ex=6603e8fb&is=65f173fb&hm=e7f6f5093a9cce1b5290b89d7931d8ff69f28f7d1cb3edbb281d7fdfda3e0e31&","rotation":[0,4.71239,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[6.25,8.1,0],"version":"40754","uuid":"1754769b-46e9-491a-85a8-1dadfb8da403"},{"type":"image","scale":[8.7,3.22,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217406312934146128/GFvcpYVW0AAKnXW-3.png?ex=6603e8fb&is=65f173fb&hm=e7f6f5093a9cce1b5290b89d7931d8ff69f28f7d1cb3edbb281d7fdfda3e0e31&","rotation":[0,3.14159,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[0,10.5,5.25],"version":"40754","uuid":"0237bd22-fdc1-48e1-a8b3-40016e2e3a3a"},{"type":"vox-model","scale":[1.25,1.25,1.25],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946337392959528/Laptop-v1.vox?ex=65dddb5e&is=65cb665e&hm=d6ebca8ffe58ef2b9e42320da67d4d16983d72685347a949b23a2442a5c7d097&","flipX":true,"rotation":[0,-0.7,0],"position":[-2.45,8.4,3.45],"version":"40748","uuid":"adef2dba-01a7-4b76-ba53-e965671b12f1"},{"type":"vox-model","scale":[1.7,1,1.6],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1206946340370911242/Rolli-v1.vox?ex=65dddb5f&is=65cb665f&hm=29e500d51dff87426ffe6c0f9f6d23a4fb5e5f4b2032ca10abe63660d3827ad4&","flipX":true,"rotation":[0,-0.6999999736312139,0],"position":[-2.575,7.75,3.45],"version":"40748","uuid":"9417d8b4-c980-41d3-9690-6c1f6d9b4684"},{"type":"image","scale":[8.4,3.22,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1217406312934146128/GFvcpYVW0AAKnXW-3.png?ex=6603e8fb&is=65f173fb&hm=e7f6f5093a9cce1b5290b89d7931d8ff69f28f7d1cb3edbb281d7fdfda3e0e31&","rotation":[0,0,0],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[0.525,8.075,-4.75],"version":"40754","uuid":"74d1e4b2-49d9-481e-ad98-465efbabd7fc"},{"type":"image","scale":[0.6,1,0],"url":"https://cdn.discordapp.com/attachments/1206945922274041937/1207101794329825320/Mouse-cursor-hand-pointer-OG.png?ex=65de6c26&is=65cbf726&hm=0226746884075110f443d1d974a137164192b6d85d2fe15803d1189ae1a2aba2&","rotation":[1.5707963267948966,1.5707963267948966,0.575],"stretch":true,"pixelated":false,"transparent":"AlphaBlend","wrapMode":"Repeat","opacity":"1.00","updateDaily":false,"uScale":1,"vScale":1,"blendMode":"Combine","position":[4.675,4.25,-0.85],"version":"40754","uuid":"a4871961-068f-4426-85d0-a0b9ce972e0d"}],"brightness":0.9},"settings":{"sandbox":false,"hosted_scripts":false},"island":"San Francisco","kind":"plot","minted":true}}